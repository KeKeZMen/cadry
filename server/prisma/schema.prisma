generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  firstName    String?       @map("first_name")
  secondName   String?       @map("second_name")
  lastName     String?       @map("last_name")
  phoneNumber  String?       @map("phone_number")
  email        String        @unique
  password     String
  role         Role
  employee     Employee?
  organization Organization?
  student      Student?
  tokens       Token[]

  @@index([id])
  @@map("users")
}

model Employee {
  userId       String       @unique @map("user_id")
  employeeType EmployeeType @map("employee_type")
  branchId     String       @map("branch_id")
  branch       Branch       @relation(fields: [branchId], references: [id])
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("employees")
}

model Student {
  userId                  String             @unique @map("user_id")
  birthDate               DateTime           @map("birth_date")
  photoUrl                String?            @map("photo_url")
  graduateYear            Int                @map("graduate_year")
  address                 String
  portfolioUrl            String?            @map("portfolio_url")
  readyToMove             Boolean            @default(false) @map("ready_to_move")
  subInfo                 String?            @map("sub_info")
  educationOrganizationId String             @map("education_organization_id")
  favoritesOrganizations  String[]           @map("favorites_organizations")
  disability              DisabilitiesTypes?
  gender                  Gender
  isActive                Boolean            @default(false) @map("is_active")
  gpa                     Float
  socialAdaptability      Int                @map("social_adaptability")
  professionId            Int                @map("speciality_id")
  subProfessions          Json[]             @map("sub_professions")
  educationOrganization   Organization       @relation(fields: [educationOrganizationId], references: [id])
  workProfession          WorkProfession     @relation(fields: [professionId], references: [id])
  user                    User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("students")
}

model Token {
  token     String   @unique
  exp       DateTime
  userId    String
  userAgent String   @map("user_agent")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Request {
  id                      Int             @id @default(autoincrement())
  educationOrganizationId String?         @map("education_organization_id")
  workOrganizationId      String          @map("work_organization_id")
  specialityId            Int?            @map("speciality_id")
  professionId            Int?            @map("profession_id")
  count                   Int
  requestYear             DateTime?       @map("request_year")
  salary                  Int
  readyToMove             Boolean         @default(false) @map("ready_to_move")
  targetAgreement         Boolean         @default(false) @map("target_agreement")
  isDisability            Boolean         @default(false) @map("is_disability")
  quotas                  Boolean         @default(false)
  description             String
  educationOrganization   Organization?   @relation("education", fields: [educationOrganizationId], references: [id])
  profession              WorkProfession? @relation(fields: [professionId], references: [id])
  speciality              Speciality?     @relation(fields: [specialityId], references: [id])
  workOrganization        Organization    @relation("work", fields: [workOrganizationId], references: [id])

  @@index([id])
  @@map("requests")
}

model Organization {
  name                         String?
  phoneNumber                  String?          @map("phone_number")
  email                        String           @unique
  web                          String?
  address                      String?
  inn                          String           @unique @db.VarChar(12)
  description                  String?
  logoUrl                      String?          @map("logo_url")
  type                         OrganizationType
  userId                       String           @unique @map("user_id")
  id                           String           @id @default(uuid())
  branches                     Branch[]
  user                         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  educationOrganizationRequest Request[]        @relation("education")
  workOrganizationRequests     Request[]        @relation("work")
  students                     Student[]

  @@index([id])
  @@map("organizations")
}

model Branch {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  address        String?
  phoneNumber    String?      @map("phone_number")
  email          String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  employees      Employee[]

  @@index([id])
  @@map("branches")
}

model Direction {
  id           Int          @id @default(autoincrement())
  key          String
  name         String
  specialities Speciality[]

  @@index([id])
  @@map("directions")
}

model Speciality {
  id             Int                          @id @default(autoincrement())
  key            String
  directionId    Int                          @map("direction_id")
  name           String
  requests       Request[]
  direction      Direction                    @relation(fields: [directionId], references: [id])
  workProfession WorkProfessionToSpeciality[]

  @@index([id])
  @@map("specialities")
}

model WorkProfessionToSpeciality {
  id               Int            @id @default(autoincrement())
  specialityId     Int            @map("speciality_id")
  workProfessionId Int            @map("work_profession_id")
  speciality       Speciality     @relation(fields: [specialityId], references: [id])
  workProfession   WorkProfession @relation(fields: [workProfessionId], references: [id])

  @@index([id])
  @@map("work_profession_to_speciality")
}

model WorkProfession {
  id           Int                          @id @default(autoincrement())
  name         String
  category     String
  requests     Request[]
  students     Student[]
  specialities WorkProfessionToSpeciality[]

  @@index([id])
  @@map("professions")
}

enum DisabilitiesTypes {
  visuallyImpaired
  hardHearing
  speechDisorders
  musculoskeletalDisorders
  impairedMental
  intellectualImpairment
  autismDisorder
}

enum Role {
  Admin
  Student
  Employee
  Organization
}

enum EmployeeType {
  Manager
  Employment
  Graduates
}

enum Gender {
  Man
  Women
}

enum OrganizationType {
  EducationOrganization
  Organization
}
